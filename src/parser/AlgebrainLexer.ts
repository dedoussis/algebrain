// Generated from src/parser/Algebrain.g4 by ANTLR 4.7.3-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

export class AlgebrainLexer extends Lexer {
    public static readonly REWRITABLE_PREFIX = 1;
    public static readonly SPACE = 2;
    public static readonly COMMAND = 3;
    public static readonly TRUE = 4;
    public static readonly FALSE = 5;
    public static readonly IF = 6;
    public static readonly AND = 7;
    public static readonly OR = 8;
    public static readonly ID = 9;
    public static readonly POINT = 10;
    public static readonly COLON = 11;
    public static readonly NOT = 12;
    public static readonly NUMBER = 13;
    public static readonly POW = 14;
    public static readonly MUL = 15;
    public static readonly DIV = 16;
    public static readonly PLUS = 17;
    public static readonly MINUS = 18;
    public static readonly LPAREN = 19;
    public static readonly RPAREN = 20;
    public static readonly LSQPAREN = 21;
    public static readonly RSQPAREN = 22;
    public static readonly COMMA = 23;
    public static readonly EQUALS = 24;
    public static readonly NEWLINE = 25;
    public static readonly WS = 26;

    // tslint:disable:no-trailing-whitespace
    public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

    // tslint:disable:no-trailing-whitespace
    public static readonly modeNames: string[] = ['DEFAULT_MODE'];

    public static readonly ruleNames: string[] = [
        'REWRITABLE_PREFIX',
        'SPACE',
        'COMMAND',
        'TRUE',
        'FALSE',
        'IF',
        'AND',
        'OR',
        'ID',
        'POINT',
        'COLON',
        'NOT',
        'NUMBER',
        'POW',
        'MUL',
        'DIV',
        'PLUS',
        'MINUS',
        'LPAREN',
        'RPAREN',
        'LSQPAREN',
        'RSQPAREN',
        'COMMA',
        'EQUALS',
        'NEWLINE',
        'WS',
    ];

    private static readonly _LITERAL_NAMES: Array<string | undefined> = [
        undefined,
        "'$'",
        "' '",
        undefined,
        "'true'",
        "'false'",
        "'if'",
        "'and'",
        "'or'",
        undefined,
        "'.'",
        "':'",
        "'not'",
        undefined,
        "'^'",
        "'*'",
        "'/'",
        "'+'",
        "'-'",
        "'('",
        "')'",
        "'['",
        "']'",
        "','",
        "'='",
    ];
    private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
        undefined,
        'REWRITABLE_PREFIX',
        'SPACE',
        'COMMAND',
        'TRUE',
        'FALSE',
        'IF',
        'AND',
        'OR',
        'ID',
        'POINT',
        'COLON',
        'NOT',
        'NUMBER',
        'POW',
        'MUL',
        'DIV',
        'PLUS',
        'MINUS',
        'LPAREN',
        'RPAREN',
        'LSQPAREN',
        'RSQPAREN',
        'COMMA',
        'EQUALS',
        'NEWLINE',
        'WS',
    ];
    public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
        AlgebrainLexer._LITERAL_NAMES,
        AlgebrainLexer._SYMBOLIC_NAMES,
        []
    );

    // @Override
    // @NotNull
    public get vocabulary(): Vocabulary {
        return AlgebrainLexer.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace

    constructor(input: CharStream) {
        super(input);
        this._interp = new LexerATNSimulator(AlgebrainLexer._ATN, this);
    }

    // @Override
    public get grammarFileName(): string {
        return 'Algebrain.g4';
    }

    // @Override
    public get ruleNames(): string[] {
        return AlgebrainLexer.ruleNames;
    }

    // @Override
    public get serializedATN(): string {
        return AlgebrainLexer._serializedATN;
    }

    // @Override
    public get channelNames(): string[] {
        return AlgebrainLexer.channelNames;
    }

    // @Override
    public get modeNames(): string[] {
        return AlgebrainLexer.modeNames;
    }

    public static readonly _serializedATN: string =
        '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1C\xCF\b\x01' +
        '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
        '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
        '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
        '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
        '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03' +
        '\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03' +
        '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04}\n\x04\x03\x05\x03\x05\x03' +
        '\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03' +
        '\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x06' +
        '\n\x95\n\n\r\n\x0E\n\x96\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03' +
        '\r\x03\x0E\x06\x0E\xA2\n\x0E\r\x0E\x0E\x0E\xA3\x03\x0E\x03\x0E\x06\x0E' +
        '\xA8\n\x0E\r\x0E\x0E\x0E\xA9\x05\x0E\xAC\n\x0E\x03\x0F\x03\x0F\x03\x10' +
        '\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14' +
        '\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19' +
        '\x03\x19\x03\x1A\x05\x1A\xC5\n\x1A\x03\x1A\x03\x1A\x03\x1B\x06\x1B\xCA' +
        '\n\x1B\r\x1B\x0E\x1B\xCB\x03\x1B\x03\x1B\x02\x02\x02\x1C\x03\x02\x03\x05' +
        '\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13' +
        '\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02' +
        "\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
        '\x02\x191\x02\x1A3\x02\x1B5\x02\x1C\x03\x02\x05\x05\x02C\\aac|\x03\x02' +
        '2;\x04\x02\v\v""\x02\xDB\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02' +
        '\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02' +
        '\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02' +
        '\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02' +
        '\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02' +
        '\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02' +
        "%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
        '\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02' +
        '\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x037\x03\x02\x02\x02\x05' +
        '9\x03\x02\x02\x02\x07|\x03\x02\x02\x02\t~\x03\x02\x02\x02\v\x83\x03\x02' +
        '\x02\x02\r\x89\x03\x02\x02\x02\x0F\x8C\x03\x02\x02\x02\x11\x90\x03\x02' +
        '\x02\x02\x13\x94\x03\x02\x02\x02\x15\x98\x03\x02\x02\x02\x17\x9A\x03\x02' +
        '\x02\x02\x19\x9C\x03\x02\x02\x02\x1B\xA1\x03\x02\x02\x02\x1D\xAD\x03\x02' +
        '\x02\x02\x1F\xAF\x03\x02\x02\x02!\xB1\x03\x02\x02\x02#\xB3\x03\x02\x02' +
        "\x02%\xB5\x03\x02\x02\x02'\xB7\x03\x02\x02\x02)\xB9\x03\x02\x02\x02+" +
        '\xBB\x03\x02\x02\x02-\xBD\x03\x02\x02\x02/\xBF\x03\x02\x02\x021\xC1\x03' +
        '\x02\x02\x023\xC4\x03\x02\x02\x025\xC9\x03\x02\x02\x0278\x07&\x02\x02' +
        '8\x04\x03\x02\x02\x029:\x07"\x02\x02:\x06\x03\x02\x02\x02;<\x07v\x02' +
        '\x02<=\x07t\x02\x02=>\x07c\x02\x02>?\x07p\x02\x02?@\x07u\x02\x02@A\x07' +
        'h\x02\x02AB\x07q\x02\x02BC\x07t\x02\x02C}\x07o\x02\x02DE\x07g\x02\x02' +
        'EF\x07x\x02\x02FG\x07c\x02\x02GH\x07n\x02\x02HI\x07w\x02\x02IJ\x07c\x02' +
        '\x02JK\x07v\x02\x02K}\x07g\x02\x02LM\x07t\x02\x02MN\x07w\x02\x02NO\x07' +
        'n\x02\x02OP\x07g\x02\x02P}\x07u\x02\x02QR\x07j\x02\x02RS\x07g\x02\x02' +
        'ST\x07n\x02\x02T}\x07r\x02\x02UV\x07v\x02\x02VW\x07t\x02\x02WX\x07g\x02' +
        '\x02X}\x07g\x02\x02YZ\x07v\x02\x02Z[\x07t\x02\x02[\\\x07c\x02\x02\\]\x07' +
        'p\x02\x02]^\x07u\x02\x02^_\x07h\x02\x02_`\x07q\x02\x02`a\x07t\x02\x02' +
        'ab\x07o\x02\x02bc\x07c\x02\x02cd\x07v\x02\x02de\x07k\x02\x02ef\x07q\x02' +
        '\x02fg\x07p\x02\x02g}\x07u\x02\x02hi\x07v\x02\x02ij\x07t\x02\x02jk\x07' +
        'c\x02\x02kl\x07p\x02\x02lm\x07u\x02\x02mn\x07h\x02\x02no\x07q\x02\x02' +
        'op\x07t\x02\x02pq\x07o\x02\x02qr\x07c\x02\x02rs\x07v\x02\x02st\x07k\x02' +
        '\x02tu\x07q\x02\x02u}\x07p\x02\x02vw\x07c\x02\x02wx\x07e\x02\x02xy\x07' +
        'v\x02\x02yz\x07k\x02\x02z{\x07x\x02\x02{}\x07g\x02\x02|;\x03\x02\x02\x02' +
        '|D\x03\x02\x02\x02|L\x03\x02\x02\x02|Q\x03\x02\x02\x02|U\x03\x02\x02\x02' +
        '|Y\x03\x02\x02\x02|h\x03\x02\x02\x02|v\x03\x02\x02\x02}\b\x03\x02\x02' +
        '\x02~\x7F\x07v\x02\x02\x7F\x80\x07t\x02\x02\x80\x81\x07w\x02\x02\x81\x82' +
        '\x07g\x02\x02\x82\n\x03\x02\x02\x02\x83\x84\x07h\x02\x02\x84\x85\x07c' +
        '\x02\x02\x85\x86\x07n\x02\x02\x86\x87\x07u\x02\x02\x87\x88\x07g\x02\x02' +
        '\x88\f\x03\x02\x02\x02\x89\x8A\x07k\x02\x02\x8A\x8B\x07h\x02\x02\x8B\x0E' +
        '\x03\x02\x02\x02\x8C\x8D\x07c\x02\x02\x8D\x8E\x07p\x02\x02\x8E\x8F\x07' +
        'f\x02\x02\x8F\x10\x03\x02\x02\x02\x90\x91\x07q\x02\x02\x91\x92\x07t\x02' +
        '\x02\x92\x12\x03\x02\x02\x02\x93\x95\t\x02\x02\x02\x94\x93\x03\x02\x02' +
        '\x02\x95\x96\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02' +
        '\x02\x97\x14\x03\x02\x02\x02\x98\x99\x070\x02\x02\x99\x16\x03\x02\x02' +
        '\x02\x9A\x9B\x07<\x02\x02\x9B\x18\x03\x02\x02\x02\x9C\x9D\x07p\x02\x02' +
        '\x9D\x9E\x07q\x02\x02\x9E\x9F\x07v\x02\x02\x9F\x1A\x03\x02\x02\x02\xA0' +
        '\xA2\t\x03\x02\x02\xA1\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3' +
        '\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xAB\x03\x02\x02\x02\xA5' +
        '\xA7\x05\x15\v\x02\xA6\xA8\t\x03\x02\x02\xA7\xA6\x03\x02\x02\x02\xA8\xA9' +
        '\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA\xAC' +
        '\x03\x02\x02\x02\xAB\xA5\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02\xAC\x1C' +
        '\x03\x02\x02\x02\xAD\xAE\x07`\x02\x02\xAE\x1E\x03\x02\x02\x02\xAF\xB0' +
        '\x07,\x02\x02\xB0 \x03\x02\x02\x02\xB1\xB2\x071\x02\x02\xB2"\x03\x02' +
        '\x02\x02\xB3\xB4\x07-\x02\x02\xB4$\x03\x02\x02\x02\xB5\xB6\x07/\x02\x02' +
        '\xB6&\x03\x02\x02\x02\xB7\xB8\x07*\x02\x02\xB8(\x03\x02\x02\x02\xB9\xBA' +
        '\x07+\x02\x02\xBA*\x03\x02\x02\x02\xBB\xBC\x07]\x02\x02\xBC,\x03\x02\x02' +
        '\x02\xBD\xBE\x07_\x02\x02\xBE.\x03\x02\x02\x02\xBF\xC0\x07.\x02\x02\xC0' +
        '0\x03\x02\x02\x02\xC1\xC2\x07?\x02\x02\xC22\x03\x02\x02\x02\xC3\xC5\x07' +
        '\x0F\x02\x02\xC4\xC3\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC6\x03' +
        '\x02\x02\x02\xC6\xC7\x07\f\x02\x02\xC74\x03\x02\x02\x02\xC8\xCA\t\x04' +
        '\x02\x02\xC9\xC8\x03\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xC9\x03\x02' +
        '\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCE\b\x1B' +
        '\x02\x02\xCE6\x03\x02\x02\x02\n\x02|\x96\xA3\xA9\xAB\xC4\xCB\x03\b\x02' +
        '\x02';
    public static __ATN: ATN;
    public static get _ATN(): ATN {
        if (!AlgebrainLexer.__ATN) {
            AlgebrainLexer.__ATN = new ATNDeserializer().deserialize(
                Utils.toCharArray(AlgebrainLexer._serializedATN)
            );
        }

        return AlgebrainLexer.__ATN;
    }
}
